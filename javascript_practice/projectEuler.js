// Utility functions

const isPrime = num => {
  for (let i = 2; i * i <= num; i++) {
    if (num % i === 0) {
      return false;
    }
  }
  return true;
};

const reverseString = string => {
  let array = string.split('');
  let tempArray = [];
  array.forEach(letter => {
    tempArray.unshift(letter);
  });
  return tempArray.join('');
};

const reverseArray = array => {
  let newArray = [];
  array.forEach(element => {
    newArray.unshift(element);
  });
  return newArray;
}; 

const isDivisible = (num, limit) => {
  for (let i = 1; i <= limit; i++) {
    if (num % i !== 0) {
      return false;
    }
  }
  return true;
};



// Find the largest palindrome made from the product of two 3-digit numbers.

// ----------------------------------------------------------------------------

// 1. Multiples of 3 and 5
// If we list all the natural numbers below 10 that are multiples of 3 or 5,
// we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.

// let sum = 0;
// let limit = 1000;

// for (let i = 0; i < limit; i++) {
//   if (i % 3 === 0 || i % 5 === 0) {
//     sum += i;
//   }
// }
// console.log(sum);

// ----------------------------------------------------------------------------

// 2. Even Fibonacci numbers
// Each new term in the Fibonacci sequence is generated by adding the
// previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not
// exceed four million, find the sum of the even-valued terms.

// let sum = 0;
// let a = 1;
// let b = 2;
// let limit = 4000000;

// while (b < limit) {
//   if (b % 2 === 0) {
//     sum += b;
//   }
//   let temp = a + b;
//   a = b;
//   b = temp;
// }
// console.log(sum);

// ----------------------------------------------------------------------------

// 3. Largest prime factor
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?

// let largest = 'There are no prime factors';
// let limit = 600851475143;

// for (let i = 0; i * i <= limit; i++) {
//   if (limit % i === 0 && isPrime(i)) {
//     largest = i;
//   }
// }

// console.log(largest);

// ----------------------------------------------------------------------------

// 4. Largest palindrome product
// A palindromic number reads the same both ways. The largest palindrome made
// from the product of two 2-digit numbers is 9009 = 91 × 99.

// let largest = 'No palindrome found';
// for (let i = 100; i < 1000; i++) {
//   for (let j = 100; j < 1000; j++) {
//     let tempString = (i * j).toString();
//     if (tempString === reverseString(tempString)) {
//       largest = i * j;
//     }
//   }
// }
// console.log(largest);

// ----------------------------------------------------------------------------

// 5. Smallest multiple
// 2520 is the smallest number that can be divided by each of the numbers from 
// 1 to 10 without any remainder. What is the smallest positive number that is 
// evenly divisible by all of the numbers from 1 to 20?

// let counter = 1;
// while(!isDivisible(counter, 20)) {
//   counter ++;
// }
// console.log(counter)

// ----------------------------------------------------------------------------

// 6. Sum square difference
// The sum of the squares of the first ten natural numbers is,
// 1^2 + 2^2 + ... + 10^2 = 385
// The square of the sum of the first ten natural numbers is,
// (1 + 2 + ... + 10)^2 = 55^2 = 3025
// Hence the difference between the sum of the squares of the first ten natural 
// numbers and the square of the sum is 3025 − 385 = 2640.
// Find the difference between the sum of the squares of the first one hundred 
// natural numbers and the square of the sum.

// let sum = 0;
// let sumOfSquares = 0;

// for (let i = 0; i <= 100; i++) {
//   sum += i;
//   sumOfSquares += i ** 2;
// }

// console.log(sum ** 2 - sumOfSquares);

// ----------------------------------------------------------------------------

// 7. 10001st prime
// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see 
// that the 6th prime is 13.
// What is the 10001st prime number?

// let counter = 2;
// let primes = [];
// while (primes.length < 10001) {
//   if (isPrime(counter)) {
//     primes.push(counter);
//   }
//   counter ++;
// }

// console.log(primes[10000]);

// ----------------------------------------------------------------------------

// 8. Largest product in a series
// The four adjacent digits in the 1000-digit number that have the greatest 
// product are 9 × 9 × 8 × 9 = 5832.
// Find the thirteen adjacent digits in the 1000-digit 
// number that have the greatest product. What is the value of this product?

// let hugeNumber = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450';
// let hugeArray = hugeNumber.split('');
// let max = 0;

// for (let i = 0; i < 1000; i++) {
//   let product = hugeArray[i];
//   for (let j = 1; j < 13; j++) {
//     product *= hugeArray[i + j];
//   }
//   if (product > max) {
//     max = product;
//   }
// }

// console.log(max);

// ----------------------------------------------------------------------------

// 9. Special Pythagorean triplet
// A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
// a^2 + b^2 = c^2
// For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
// There exists exactly one Pythagorean triplet for which a + b + c = 1000.
// Find the product abc.

// let A = B = C = null;
// for (let a = 1; a < 333; a++) {
//   for (let b = a + 1; a + b < 666; b++) {
//     for(let c = b + 1; a + b + c <= 1000; c++) {
//       if (a + b + c === 1000 && a * a + b * b === c * c) {
//         A = a;
//         B = b;
//         C = c;
//       }
//     }
//   }
// }

// console.log(A * B * C);

// ----------------------------------------------------------------------------

// 10. Summation of primes
// The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
// Find the sum of all the primes below two million.

// let sum = 0;
// let limit = 2000000;
// for (let i = 2; i < limit; i++) {
//   if (isPrime(i)) {
//     sum += i;
//   }
// }

// console.log(sum);